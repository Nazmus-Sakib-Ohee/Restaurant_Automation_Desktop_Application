/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wifiordering;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import com.mysql.jdbc.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nazmus_Sakib_Ohee
 */
public class OrderList extends javax.swing.JFrame {

    String add1,add2,add3,add4,add5,combostring;
    /**
     * Creates new form OrderList
    
  */
    public OrderList() {
        initComponents();
     
        Show_Products_In_JTable();
      
         instituteThreads();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
        
        
          public  ArrayList<WifiOrdering> getProductList()  
    {
            ArrayList<WifiOrdering> productList  = new ArrayList<WifiOrdering>();
            Connection con = null;
        try {
            SampleDatabase abj =new SampleDatabase();
            con=(Connection) abj.getconnection();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
        }
            String query = "SELECT * FROM orderTable";
      

            Statement st;
            ResultSet rs;
            
        try {
            
            st = con.createStatement();
            rs = st.executeQuery(query);
            WifiOrdering product;
            
            while(rs.next())
            {
                product = new WifiOrdering(rs.getString("orderno"),rs.getString("tableno"),rs.getString("orders"),rs.getString("price"),rs.getString("status"));
                productList.add(product);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return productList; 
                
    }
          
      public  void instituteThreads() {
        Thread queryThread1;
        queryThread1 = new Thread() {
            @Override
            public void run() {
                while (true) {
                    try {
                        sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                        Show_Products_In_JTable();
                        
//                   THREAD 1 
                        }
                    });
                }
            }
        };
        queryThread1.start();
        Thread queryThread2 = new Thread() {
            @Override
            public void run() {
                while (true) {
                    try {
                        sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                       
                            Show_Products_In_JTable();
                            
//                            THREAD 2 
                        }
                    });
                }
            }
        };
        queryThread2.start();
    }

          
     public void Show_Products_In_JTable()
    {
        
        
        ArrayList<WifiOrdering> list = getProductList();
        DefaultTableModel model = (DefaultTableModel)JTable_Products.getModel();
        // clear jtable content
        model.setRowCount(0);
        Object[] row = new Object[5];
        for(int i = 0; i < list.size(); i++)
        {
            row[0] = list.get(i).getOrderNo();
            row[1] = list.get(i).getTableNo();
            row[2] = list.get(i).getOrders();
            row[3] = list.get(i).getPrice();
            row[4] = list.get(i).getStatus();

            
            model.addRow(row);
        }
        
     
    
    
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        JTable_Products = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        statuschangecombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        currentstatus = new javax.swing.JLabel();
        selectedrow = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N

        JTable_Products.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        JTable_Products.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        JTable_Products.setForeground(new java.awt.Color(255, 51, 51));
        JTable_Products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order No", "Table NO", "ORDERS", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTable_Products.setToolTipText("");
        JTable_Products.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        JTable_Products.setRowHeight(30);
        JTable_Products.setSelectionBackground(new java.awt.Color(0, 0, 255));
        JTable_Products.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTable_ProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTable_Products);

        jButton1.setBackground(new java.awt.Color(204, 0, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statuschangecombobox.setBackground(new java.awt.Color(204, 204, 0));
        statuschangecombobox.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        statuschangecombobox.setForeground(new java.awt.Color(0, 204, 102));
        statuschangecombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Delivered", "Not Delivered" }));
        statuschangecombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statuschangecomboboxActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(51, 255, 153));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 255));
        jLabel1.setText("Status Change :");

        currentstatus.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        currentstatus.setForeground(new java.awt.Color(204, 0, 204));
        currentstatus.setText("Current Status");

        selectedrow.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        selectedrow.setForeground(new java.awt.Color(204, 0, 204));
        selectedrow.setText("Select Row");

        jButton2.setBackground(new java.awt.Color(153, 255, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currentstatus))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(statuschangecombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(selectedrow))
                        .addGap(78, 78, 78)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 398, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentstatus)
                    .addComponent(selectedrow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statuschangecombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statuschangecomboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statuschangecomboboxActionPerformed
        // TODO add your handling code here:
        
        String[] options1 = { "Select", "Delivered", "Not Delivered"};
     
    }//GEN-LAST:event_statuschangecomboboxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String b=statuschangecombobox.getSelectedItem().toString();
         String check=selectedrow.getText().toString();

        if(b=="Select"){
            JOptionPane.showMessageDialog(rootPane,"Select required Status First");
        }
        else if(check.equals("Select Row")){
                    JOptionPane.showMessageDialog(rootPane,"Select Row");
                }
        else{
            
            combostring=statuschangecombobox.getSelectedItem().toString();
            
           String query2="UPDATE`ordertable`SET`orderno`='"+add1+"',`tableno`='"+add2+"',`orders`='"+add3+"',`price`='"+add4+"',`status`='"+combostring+"' WHERE `orderno`='"+add1+"'";
      
          Connection con = null;
        SampleDatabase abj;
            try {
                abj = new SampleDatabase();
                  con=(Connection) abj.getconnection();
            } catch (SQLException ex) {
                Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
            }
          
        
        
        Statement sr;
            try {
                sr = con.createStatement();
                sr.executeUpdate(query2);
                
                
            } catch (SQLException ex) {
                Logger.getLogger(OrderList.class.getName()).log(Level.SEVERE, null, ex);
            }
        Show_Products_In_JTable();
        }
        
       
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void JTable_ProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTable_ProductsMouseClicked

  int a=JTable_Products.getSelectedRow();
   DefaultTableModel model=(DefaultTableModel) JTable_Products.getModel();
   selectedrow.setText(model.getValueAt(a, 4).toString());
 add1=model.getValueAt(a,0).toString();
   add2=model.getValueAt(a,1).toString();
  add3=model.getValueAt(a,2).toString();
    add4=model.getValueAt(a,3).toString();
       add5=model.getValueAt(a,4).toString();

        // TODO add your handling code here:
    }//GEN-LAST:event_JTable_ProductsMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Show_Products_In_JTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new OrderList().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTable_Products;
    private javax.swing.JLabel currentstatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel selectedrow;
    private javax.swing.JComboBox<String> statuschangecombobox;
    // End of variables declaration//GEN-END:variables

    private void jComboBox1(String[] options1) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
}
